/* tslint:disable */
/* eslint-disable */
/*
YNAB API Endpoints

Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

The version of the OpenAPI document: 1.68.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountResponse } from '../models';
// @ts-ignore
import { AccountsResponse } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { PostAccountWrapper } from '../models';
// @ts-ignore
import { SaveAccount } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new account
         * @summary Create a new account
         * @param {string} budgetId The id of the budget (\&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget)
         * @param {PostAccountWrapper} data The account to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount: async (budgetId: string, data: PostAccountWrapper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('createNewAccount', 'budgetId', budgetId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createNewAccount', 'data', data)
            const localVarPath = `/budgets/{budget_id}/accounts`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: data,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single account
         * @summary Single account
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string} accountId The id of the account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAccount: async (budgetId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('getSingleAccount', 'budgetId', budgetId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getSingleAccount', 'accountId', accountId)
            const localVarPath = `/budgets/{budget_id}/accounts/{account_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/accounts/{account_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all accounts
         * @summary Account list
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (budgetId: string, lastKnowledgeOfServer?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('listAll', 'budgetId', budgetId)
            const localVarPath = `/budgets/{budget_id}/accounts`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (lastKnowledgeOfServer !== undefined) {
                localVarQueryParameter['last_knowledge_of_server'] = lastKnowledgeOfServer;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new account
         * @summary Create a new account
         * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponse>> {
            const data: PostAccountWrapper = {
                account: requestParameters.account
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAccount(requestParameters.budgetId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single account
         * @summary Single account
         * @param {AccountsApiGetSingleAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleAccount(requestParameters: AccountsApiGetSingleAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleAccount(requestParameters.budgetId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all accounts
         * @summary Account list
         * @param {AccountsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: AccountsApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.budgetId, requestParameters.lastKnowledgeOfServer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Creates a new account
         * @summary Create a new account
         * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest, options?: AxiosRequestConfig): AxiosPromise<AccountResponse> {
            return localVarFp.createNewAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single account
         * @summary Single account
         * @param {AccountsApiGetSingleAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAccount(requestParameters: AccountsApiGetSingleAccountRequest, options?: AxiosRequestConfig): AxiosPromise<AccountResponse> {
            return localVarFp.getSingleAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all accounts
         * @summary Account list
         * @param {AccountsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: AccountsApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<AccountsResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateNewAccountRequest
 */
export type AccountsApiCreateNewAccountRequest = {
    
    /**
    * The id of the budget (\"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget)
    * @type {string}
    * @memberof AccountsApiCreateNewAccount
    */
    readonly budgetId: string
    
} & PostAccountWrapper

/**
 * Request parameters for getSingleAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiGetSingleAccountRequest
 */
export type AccountsApiGetSingleAccountRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof AccountsApiGetSingleAccount
    */
    readonly budgetId: string
    
    /**
    * The id of the account
    * @type {string}
    * @memberof AccountsApiGetSingleAccount
    */
    readonly accountId: string
    
}

/**
 * Request parameters for listAll operation in AccountsApi.
 * @export
 * @interface AccountsApiListAllRequest
 */
export type AccountsApiListAllRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof AccountsApiListAll
    */
    readonly budgetId: string
    
    /**
    * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
    * @type {number}
    * @memberof AccountsApiListAll
    */
    readonly lastKnowledgeOfServer?: number
    
}

/**
 * AccountsApiGenerated - object-oriented interface
 * @export
 * @class AccountsApiGenerated
 * @extends {BaseAPI}
 */
export class AccountsApiGenerated extends BaseAPI {
    /**
     * Creates a new account
     * @summary Create a new account
     * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).createNewAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single account
     * @summary Single account
     * @param {AccountsApiGetSingleAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getSingleAccount(requestParameters: AccountsApiGetSingleAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getSingleAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all accounts
     * @summary Account list
     * @param {AccountsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public listAll(requestParameters: AccountsApiListAllRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
