/* tslint:disable */
/* eslint-disable */
/*
YNAB API Endpoints

Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

The version of the OpenAPI document: 1.68.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CategoriesResponse } from '../models';
// @ts-ignore
import { CategoryResponse } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { PatchCategoryWrapper } from '../models';
// @ts-ignore
import { PatchMonthCategoryWrapper } from '../models';
// @ts-ignore
import { SaveCategory } from '../models';
// @ts-ignore
import { SaveCategoryResponse } from '../models';
// @ts-ignore
import { SaveMonthCategory } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary Single category for a specific budget month
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string | Date} month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))
         * @param {string} categoryId The id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthCategoryById: async (budgetId: string, month: string | Date, categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('getMonthCategoryById', 'budgetId', budgetId)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getMonthCategoryById', 'month', month)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getMonthCategoryById', 'categoryId', categoryId)
            const localVarPath = `/budgets/{budget_id}/months/{month}/categories/{category_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/months/{month}/categories/{category_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary Single category
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string} categoryId The id of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCategory: async (budgetId: string, categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('getSingleCategory', 'budgetId', budgetId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getSingleCategory', 'categoryId', categoryId)
            const localVarPath = `/budgets/{budget_id}/categories/{category_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/categories/{category_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary List categories
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByBudgetId: async (budgetId: string, lastKnowledgeOfServer?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('listByBudgetId', 'budgetId', budgetId)
            const localVarPath = `/budgets/{budget_id}/categories`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (lastKnowledgeOfServer !== undefined) {
                localVarQueryParameter['last_knowledge_of_server'] = lastKnowledgeOfServer;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a category
         * @summary Update a category
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string} categoryId The id of the category
         * @param {PatchCategoryWrapper} data The category to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryById: async (budgetId: string, categoryId: string, data: PatchCategoryWrapper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('updateCategoryById', 'budgetId', budgetId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updateCategoryById', 'categoryId', categoryId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('updateCategoryById', 'data', data)
            const localVarPath = `/budgets/{budget_id}/categories/{category_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: data,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/categories/{category_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a category for a specific month.  Only `budgeted` amount can be updated.
         * @summary Update a category for a specific month
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string | Date} month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))
         * @param {string} categoryId The id of the category
         * @param {PatchMonthCategoryWrapper} data The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMonthCategory: async (budgetId: string, month: string | Date, categoryId: string, data: PatchMonthCategoryWrapper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('updateMonthCategory', 'budgetId', budgetId)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('updateMonthCategory', 'month', month)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updateMonthCategory', 'categoryId', categoryId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('updateMonthCategory', 'data', data)
            const localVarPath = `/budgets/{budget_id}/months/{month}/categories/{category_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: data,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/months/{month}/categories/{category_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary Single category for a specific budget month
         * @param {CategoriesApiGetMonthCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonthCategoryById(requestParameters: CategoriesApiGetMonthCategoryByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonthCategoryById(requestParameters.budgetId, requestParameters.month, requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary Single category
         * @param {CategoriesApiGetSingleCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleCategory(requestParameters: CategoriesApiGetSingleCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleCategory(requestParameters.budgetId, requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary List categories
         * @param {CategoriesApiListByBudgetIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByBudgetId(requestParameters: CategoriesApiListByBudgetIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByBudgetId(requestParameters.budgetId, requestParameters.lastKnowledgeOfServer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a category
         * @summary Update a category
         * @param {CategoriesApiUpdateCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryById(requestParameters: CategoriesApiUpdateCategoryByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaveCategoryResponse>> {
            const data: PatchCategoryWrapper = {
                category: requestParameters.category
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategoryById(requestParameters.budgetId, requestParameters.categoryId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a category for a specific month.  Only `budgeted` amount can be updated.
         * @summary Update a category for a specific month
         * @param {CategoriesApiUpdateMonthCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMonthCategory(requestParameters: CategoriesApiUpdateMonthCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaveCategoryResponse>> {
            const data: PatchMonthCategoryWrapper = {
                category: requestParameters.category
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMonthCategory(requestParameters.budgetId, requestParameters.month, requestParameters.categoryId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary Single category for a specific budget month
         * @param {CategoriesApiGetMonthCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthCategoryById(requestParameters: CategoriesApiGetMonthCategoryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.getMonthCategoryById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary Single category
         * @param {CategoriesApiGetSingleCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCategory(requestParameters: CategoriesApiGetSingleCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.getSingleCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         * @summary List categories
         * @param {CategoriesApiListByBudgetIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByBudgetId(requestParameters: CategoriesApiListByBudgetIdRequest, options?: AxiosRequestConfig): AxiosPromise<CategoriesResponse> {
            return localVarFp.listByBudgetId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a category
         * @summary Update a category
         * @param {CategoriesApiUpdateCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryById(requestParameters: CategoriesApiUpdateCategoryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SaveCategoryResponse> {
            return localVarFp.updateCategoryById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a category for a specific month.  Only `budgeted` amount can be updated.
         * @summary Update a category for a specific month
         * @param {CategoriesApiUpdateMonthCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMonthCategory(requestParameters: CategoriesApiUpdateMonthCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<SaveCategoryResponse> {
            return localVarFp.updateMonthCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMonthCategoryById operation in CategoriesApi.
 * @export
 * @interface CategoriesApiGetMonthCategoryByIdRequest
 */
export type CategoriesApiGetMonthCategoryByIdRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof CategoriesApiGetMonthCategoryById
    */
    readonly budgetId: string
    
    /**
    * The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
    * @type {string | Date}
    * @memberof CategoriesApiGetMonthCategoryById
    */
    readonly month: string | Date
    
    /**
    * The id of the category
    * @type {string}
    * @memberof CategoriesApiGetMonthCategoryById
    */
    readonly categoryId: string
    
}

/**
 * Request parameters for getSingleCategory operation in CategoriesApi.
 * @export
 * @interface CategoriesApiGetSingleCategoryRequest
 */
export type CategoriesApiGetSingleCategoryRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof CategoriesApiGetSingleCategory
    */
    readonly budgetId: string
    
    /**
    * The id of the category
    * @type {string}
    * @memberof CategoriesApiGetSingleCategory
    */
    readonly categoryId: string
    
}

/**
 * Request parameters for listByBudgetId operation in CategoriesApi.
 * @export
 * @interface CategoriesApiListByBudgetIdRequest
 */
export type CategoriesApiListByBudgetIdRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof CategoriesApiListByBudgetId
    */
    readonly budgetId: string
    
    /**
    * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
    * @type {number}
    * @memberof CategoriesApiListByBudgetId
    */
    readonly lastKnowledgeOfServer?: number
    
}

/**
 * Request parameters for updateCategoryById operation in CategoriesApi.
 * @export
 * @interface CategoriesApiUpdateCategoryByIdRequest
 */
export type CategoriesApiUpdateCategoryByIdRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof CategoriesApiUpdateCategoryById
    */
    readonly budgetId: string
    
    /**
    * The id of the category
    * @type {string}
    * @memberof CategoriesApiUpdateCategoryById
    */
    readonly categoryId: string
    
} & PatchCategoryWrapper

/**
 * Request parameters for updateMonthCategory operation in CategoriesApi.
 * @export
 * @interface CategoriesApiUpdateMonthCategoryRequest
 */
export type CategoriesApiUpdateMonthCategoryRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof CategoriesApiUpdateMonthCategory
    */
    readonly budgetId: string
    
    /**
    * The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
    * @type {string | Date}
    * @memberof CategoriesApiUpdateMonthCategory
    */
    readonly month: string | Date
    
    /**
    * The id of the category
    * @type {string}
    * @memberof CategoriesApiUpdateMonthCategory
    */
    readonly categoryId: string
    
} & PatchMonthCategoryWrapper

/**
 * CategoriesApiGenerated - object-oriented interface
 * @export
 * @class CategoriesApiGenerated
 * @extends {BaseAPI}
 */
export class CategoriesApiGenerated extends BaseAPI {
    /**
     * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category for a specific budget month
     * @param {CategoriesApiGetMonthCategoryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiGenerated
     */
    public getMonthCategoryById(requestParameters: CategoriesApiGetMonthCategoryByIdRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getMonthCategoryById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category
     * @param {CategoriesApiGetSingleCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiGenerated
     */
    public getSingleCategory(requestParameters: CategoriesApiGetSingleCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getSingleCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary List categories
     * @param {CategoriesApiListByBudgetIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiGenerated
     */
    public listByBudgetId(requestParameters: CategoriesApiListByBudgetIdRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).listByBudgetId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a category
     * @summary Update a category
     * @param {CategoriesApiUpdateCategoryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiGenerated
     */
    public updateCategoryById(requestParameters: CategoriesApiUpdateCategoryByIdRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).updateCategoryById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a category for a specific month.  Only `budgeted` amount can be updated.
     * @summary Update a category for a specific month
     * @param {CategoriesApiUpdateMonthCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiGenerated
     */
    public updateMonthCategory(requestParameters: CategoriesApiUpdateMonthCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).updateMonthCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
