/* tslint:disable */
/* eslint-disable */
/*
YNAB API Endpoints

Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

The version of the OpenAPI document: 1.68.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { MonthDetailResponse } from '../models';
// @ts-ignore
import { MonthSummariesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MonthsApi - axios parameter creator
 * @export
 */
export const MonthsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single budget month
         * @summary Single budget month
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string | Date} month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (budgetId: string, month: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('getSingle', 'budgetId', budgetId)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getSingle', 'month', month)
            const localVarPath = `/budgets/{budget_id}/months/{month}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/months/{month}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all budget months
         * @summary List budget months
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (budgetId: string, lastKnowledgeOfServer?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('list', 'budgetId', budgetId)
            const localVarPath = `/budgets/{budget_id}/months`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (lastKnowledgeOfServer !== undefined) {
                localVarQueryParameter['last_knowledge_of_server'] = lastKnowledgeOfServer;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/months',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MonthsApi - functional programming interface
 * @export
 */
export const MonthsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MonthsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single budget month
         * @summary Single budget month
         * @param {MonthsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: MonthsApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonthDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.budgetId, requestParameters.month, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all budget months
         * @summary List budget months
         * @param {MonthsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: MonthsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonthSummariesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.budgetId, requestParameters.lastKnowledgeOfServer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MonthsApi - factory interface
 * @export
 */
export const MonthsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MonthsApiFp(configuration)
    return {
        /**
         * Returns a single budget month
         * @summary Single budget month
         * @param {MonthsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: MonthsApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<MonthDetailResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all budget months
         * @summary List budget months
         * @param {MonthsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: MonthsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<MonthSummariesResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSingle operation in MonthsApi.
 * @export
 * @interface MonthsApiGetSingleRequest
 */
export type MonthsApiGetSingleRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof MonthsApiGetSingle
    */
    readonly budgetId: string
    
    /**
    * The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
    * @type {string | Date}
    * @memberof MonthsApiGetSingle
    */
    readonly month: string | Date
    
}

/**
 * Request parameters for list operation in MonthsApi.
 * @export
 * @interface MonthsApiListRequest
 */
export type MonthsApiListRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof MonthsApiList
    */
    readonly budgetId: string
    
    /**
    * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
    * @type {number}
    * @memberof MonthsApiList
    */
    readonly lastKnowledgeOfServer?: number
    
}

/**
 * MonthsApiGenerated - object-oriented interface
 * @export
 * @class MonthsApiGenerated
 * @extends {BaseAPI}
 */
export class MonthsApiGenerated extends BaseAPI {
    /**
     * Returns a single budget month
     * @summary Single budget month
     * @param {MonthsApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonthsApiGenerated
     */
    public getSingle(requestParameters: MonthsApiGetSingleRequest, options?: AxiosRequestConfig) {
        return MonthsApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all budget months
     * @summary List budget months
     * @param {MonthsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonthsApiGenerated
     */
    public list(requestParameters: MonthsApiListRequest, options?: AxiosRequestConfig) {
        return MonthsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
