/* tslint:disable */
/* eslint-disable */
/*
YNAB API Endpoints

Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

The version of the OpenAPI document: 1.68.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { PayeeLocationResponse } from '../models';
// @ts-ignore
import { PayeeLocationsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayeeLocationsApi - axios parameter creator
 * @export
 */
export const PayeeLocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single payee location
         * @summary Single payee location
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string} payeeLocationId id of payee location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (budgetId: string, payeeLocationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('getSingle', 'budgetId', budgetId)
            // verify required parameter 'payeeLocationId' is not null or undefined
            assertParamExists('getSingle', 'payeeLocationId', payeeLocationId)
            const localVarPath = `/budgets/{budget_id}/payee_locations/{payee_location_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"payee_location_id"}}`, encodeURIComponent(String(payeeLocationId !== undefined ? payeeLocationId : `-payee_location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/payee_locations/{payee_location_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all payee locations
         * @summary List payee locations
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (budgetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('listAll', 'budgetId', budgetId)
            const localVarPath = `/budgets/{budget_id}/payee_locations`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/payee_locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all payee locations for a specified payee
         * @summary List locations for a payee
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string} payeeId id of payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPayee: async (budgetId: string, payeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('listByPayee', 'budgetId', budgetId)
            // verify required parameter 'payeeId' is not null or undefined
            assertParamExists('listByPayee', 'payeeId', payeeId)
            const localVarPath = `/budgets/{budget_id}/payees/{payee_id}/payee_locations`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"payee_id"}}`, encodeURIComponent(String(payeeId !== undefined ? payeeId : `-payee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/payees/{payee_id}/payee_locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayeeLocationsApi - functional programming interface
 * @export
 */
export const PayeeLocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayeeLocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single payee location
         * @summary Single payee location
         * @param {PayeeLocationsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: PayeeLocationsApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayeeLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.budgetId, requestParameters.payeeLocationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all payee locations
         * @summary List payee locations
         * @param {PayeeLocationsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: PayeeLocationsApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayeeLocationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.budgetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all payee locations for a specified payee
         * @summary List locations for a payee
         * @param {PayeeLocationsApiListByPayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPayee(requestParameters: PayeeLocationsApiListByPayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayeeLocationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByPayee(requestParameters.budgetId, requestParameters.payeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayeeLocationsApi - factory interface
 * @export
 */
export const PayeeLocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayeeLocationsApiFp(configuration)
    return {
        /**
         * Returns a single payee location
         * @summary Single payee location
         * @param {PayeeLocationsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: PayeeLocationsApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<PayeeLocationResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all payee locations
         * @summary List payee locations
         * @param {PayeeLocationsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: PayeeLocationsApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<PayeeLocationsResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all payee locations for a specified payee
         * @summary List locations for a payee
         * @param {PayeeLocationsApiListByPayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPayee(requestParameters: PayeeLocationsApiListByPayeeRequest, options?: AxiosRequestConfig): AxiosPromise<PayeeLocationsResponse> {
            return localVarFp.listByPayee(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSingle operation in PayeeLocationsApi.
 * @export
 * @interface PayeeLocationsApiGetSingleRequest
 */
export type PayeeLocationsApiGetSingleRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof PayeeLocationsApiGetSingle
    */
    readonly budgetId: string
    
    /**
    * id of payee location
    * @type {string}
    * @memberof PayeeLocationsApiGetSingle
    */
    readonly payeeLocationId: string
    
}

/**
 * Request parameters for listAll operation in PayeeLocationsApi.
 * @export
 * @interface PayeeLocationsApiListAllRequest
 */
export type PayeeLocationsApiListAllRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof PayeeLocationsApiListAll
    */
    readonly budgetId: string
    
}

/**
 * Request parameters for listByPayee operation in PayeeLocationsApi.
 * @export
 * @interface PayeeLocationsApiListByPayeeRequest
 */
export type PayeeLocationsApiListByPayeeRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof PayeeLocationsApiListByPayee
    */
    readonly budgetId: string
    
    /**
    * id of payee
    * @type {string}
    * @memberof PayeeLocationsApiListByPayee
    */
    readonly payeeId: string
    
}

/**
 * PayeeLocationsApiGenerated - object-oriented interface
 * @export
 * @class PayeeLocationsApiGenerated
 * @extends {BaseAPI}
 */
export class PayeeLocationsApiGenerated extends BaseAPI {
    /**
     * Returns a single payee location
     * @summary Single payee location
     * @param {PayeeLocationsApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApiGenerated
     */
    public getSingle(requestParameters: PayeeLocationsApiGetSingleRequest, options?: AxiosRequestConfig) {
        return PayeeLocationsApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all payee locations
     * @summary List payee locations
     * @param {PayeeLocationsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApiGenerated
     */
    public listAll(requestParameters: PayeeLocationsApiListAllRequest, options?: AxiosRequestConfig) {
        return PayeeLocationsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all payee locations for a specified payee
     * @summary List locations for a payee
     * @param {PayeeLocationsApiListByPayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApiGenerated
     */
    public listByPayee(requestParameters: PayeeLocationsApiListByPayeeRequest, options?: AxiosRequestConfig) {
        return PayeeLocationsApiFp(this.configuration).listByPayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
