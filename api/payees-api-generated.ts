/* tslint:disable */
/* eslint-disable */
/*
YNAB API Endpoints

Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

The version of the OpenAPI document: 1.68.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { PayeeResponse } from '../models';
// @ts-ignore
import { PayeesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayeesApi - axios parameter creator
 * @export
 */
export const PayeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single payee
         * @summary Single payee
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string} payeeId The id of the payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayee: async (budgetId: string, payeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('getSinglePayee', 'budgetId', budgetId)
            // verify required parameter 'payeeId' is not null or undefined
            assertParamExists('getSinglePayee', 'payeeId', payeeId)
            const localVarPath = `/budgets/{budget_id}/payees/{payee_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"payee_id"}}`, encodeURIComponent(String(payeeId !== undefined ? payeeId : `-payee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/payees/{payee_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all payees
         * @summary List payees
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (budgetId: string, lastKnowledgeOfServer?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('listAll', 'budgetId', budgetId)
            const localVarPath = `/budgets/{budget_id}/payees`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (lastKnowledgeOfServer !== undefined) {
                localVarQueryParameter['last_knowledge_of_server'] = lastKnowledgeOfServer;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/payees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayeesApi - functional programming interface
 * @export
 */
export const PayeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayeesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single payee
         * @summary Single payee
         * @param {PayeesApiGetSinglePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePayee(requestParameters: PayeesApiGetSinglePayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePayee(requestParameters.budgetId, requestParameters.payeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all payees
         * @summary List payees
         * @param {PayeesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: PayeesApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayeesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.budgetId, requestParameters.lastKnowledgeOfServer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayeesApi - factory interface
 * @export
 */
export const PayeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayeesApiFp(configuration)
    return {
        /**
         * Returns a single payee
         * @summary Single payee
         * @param {PayeesApiGetSinglePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayee(requestParameters: PayeesApiGetSinglePayeeRequest, options?: AxiosRequestConfig): AxiosPromise<PayeeResponse> {
            return localVarFp.getSinglePayee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all payees
         * @summary List payees
         * @param {PayeesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: PayeesApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<PayeesResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSinglePayee operation in PayeesApi.
 * @export
 * @interface PayeesApiGetSinglePayeeRequest
 */
export type PayeesApiGetSinglePayeeRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof PayeesApiGetSinglePayee
    */
    readonly budgetId: string
    
    /**
    * The id of the payee
    * @type {string}
    * @memberof PayeesApiGetSinglePayee
    */
    readonly payeeId: string
    
}

/**
 * Request parameters for listAll operation in PayeesApi.
 * @export
 * @interface PayeesApiListAllRequest
 */
export type PayeesApiListAllRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof PayeesApiListAll
    */
    readonly budgetId: string
    
    /**
    * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
    * @type {number}
    * @memberof PayeesApiListAll
    */
    readonly lastKnowledgeOfServer?: number
    
}

/**
 * PayeesApiGenerated - object-oriented interface
 * @export
 * @class PayeesApiGenerated
 * @extends {BaseAPI}
 */
export class PayeesApiGenerated extends BaseAPI {
    /**
     * Returns a single payee
     * @summary Single payee
     * @param {PayeesApiGetSinglePayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeesApiGenerated
     */
    public getSinglePayee(requestParameters: PayeesApiGetSinglePayeeRequest, options?: AxiosRequestConfig) {
        return PayeesApiFp(this.configuration).getSinglePayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all payees
     * @summary List payees
     * @param {PayeesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeesApiGenerated
     */
    public listAll(requestParameters: PayeesApiListAllRequest, options?: AxiosRequestConfig) {
        return PayeesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
