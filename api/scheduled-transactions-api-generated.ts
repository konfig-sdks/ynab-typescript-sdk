/* tslint:disable */
/* eslint-disable */
/*
YNAB API Endpoints

Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

The version of the OpenAPI document: 1.68.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ScheduledTransactionResponse } from '../models';
// @ts-ignore
import { ScheduledTransactionsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScheduledTransactionsApi - axios parameter creator
 * @export
 */
export const ScheduledTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single scheduled transaction
         * @summary Single scheduled transaction
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {string} scheduledTransactionId The id of the scheduled transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleScheduledTransaction: async (budgetId: string, scheduledTransactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('getSingleScheduledTransaction', 'budgetId', budgetId)
            // verify required parameter 'scheduledTransactionId' is not null or undefined
            assertParamExists('getSingleScheduledTransaction', 'scheduledTransactionId', scheduledTransactionId)
            const localVarPath = `/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)))
                .replace(`{${"scheduled_transaction_id"}}`, encodeURIComponent(String(scheduledTransactionId !== undefined ? scheduledTransactionId : `-scheduled_transaction_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all scheduled transactions
         * @summary List scheduled transactions
         * @param {string} budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
         * @param {number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (budgetId: string, lastKnowledgeOfServer?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('listAll', 'budgetId', budgetId)
            const localVarPath = `/budgets/{budget_id}/scheduled_transactions`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (lastKnowledgeOfServer !== undefined) {
                localVarQueryParameter['last_knowledge_of_server'] = lastKnowledgeOfServer;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/budgets/{budget_id}/scheduled_transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduledTransactionsApi - functional programming interface
 * @export
 */
export const ScheduledTransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduledTransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single scheduled transaction
         * @summary Single scheduled transaction
         * @param {ScheduledTransactionsApiGetSingleScheduledTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleScheduledTransaction(requestParameters: ScheduledTransactionsApiGetSingleScheduledTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleScheduledTransaction(requestParameters.budgetId, requestParameters.scheduledTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all scheduled transactions
         * @summary List scheduled transactions
         * @param {ScheduledTransactionsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: ScheduledTransactionsApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.budgetId, requestParameters.lastKnowledgeOfServer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduledTransactionsApi - factory interface
 * @export
 */
export const ScheduledTransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduledTransactionsApiFp(configuration)
    return {
        /**
         * Returns a single scheduled transaction
         * @summary Single scheduled transaction
         * @param {ScheduledTransactionsApiGetSingleScheduledTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleScheduledTransaction(requestParameters: ScheduledTransactionsApiGetSingleScheduledTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduledTransactionResponse> {
            return localVarFp.getSingleScheduledTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all scheduled transactions
         * @summary List scheduled transactions
         * @param {ScheduledTransactionsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: ScheduledTransactionsApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduledTransactionsResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSingleScheduledTransaction operation in ScheduledTransactionsApi.
 * @export
 * @interface ScheduledTransactionsApiGetSingleScheduledTransactionRequest
 */
export type ScheduledTransactionsApiGetSingleScheduledTransactionRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof ScheduledTransactionsApiGetSingleScheduledTransaction
    */
    readonly budgetId: string
    
    /**
    * The id of the scheduled transaction
    * @type {string}
    * @memberof ScheduledTransactionsApiGetSingleScheduledTransaction
    */
    readonly scheduledTransactionId: string
    
}

/**
 * Request parameters for listAll operation in ScheduledTransactionsApi.
 * @export
 * @interface ScheduledTransactionsApiListAllRequest
 */
export type ScheduledTransactionsApiListAllRequest = {
    
    /**
    * The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
    * @type {string}
    * @memberof ScheduledTransactionsApiListAll
    */
    readonly budgetId: string
    
    /**
    * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
    * @type {number}
    * @memberof ScheduledTransactionsApiListAll
    */
    readonly lastKnowledgeOfServer?: number
    
}

/**
 * ScheduledTransactionsApiGenerated - object-oriented interface
 * @export
 * @class ScheduledTransactionsApiGenerated
 * @extends {BaseAPI}
 */
export class ScheduledTransactionsApiGenerated extends BaseAPI {
    /**
     * Returns a single scheduled transaction
     * @summary Single scheduled transaction
     * @param {ScheduledTransactionsApiGetSingleScheduledTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTransactionsApiGenerated
     */
    public getSingleScheduledTransaction(requestParameters: ScheduledTransactionsApiGetSingleScheduledTransactionRequest, options?: AxiosRequestConfig) {
        return ScheduledTransactionsApiFp(this.configuration).getSingleScheduledTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all scheduled transactions
     * @summary List scheduled transactions
     * @param {ScheduledTransactionsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTransactionsApiGenerated
     */
    public listAll(requestParameters: ScheduledTransactionsApiListAllRequest, options?: AxiosRequestConfig) {
        return ScheduledTransactionsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
